import React, { useState } from 'react';
import { Card } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import Icon from '@/components/ui/icon';

interface Question {
  id: string;
  question: string;
  options: string[];
  correct: number;
  explanation: string;
  reward: number;
}

const gameQuestions: Question[] = [
  {
    id: '1',
    question: 'What should you do with your money first?',
    options: ['–ü–æ—Ç—Ä–∞—Ç–∏—Ç—å –Ω–∞ —Å–ª–∞–¥–æ—Å—Ç–∏', '–û—Ç–ª–æ–∂–∏—Ç—å —á–∞—Å—Ç—å –Ω–∞ —Å–±–µ—Ä–µ–∂–µ–Ω–∏—è', '–î–∞—Ç—å –¥—Ä—É–≥—É', '–ü–æ—Ç–µ—Ä—è—Ç—å'],
    correct: 1,
    explanation: '–ü—Ä–∞–≤–∏–ª—å–Ω–æ! –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –æ—Ç–ª–æ–∂–∏—Ç—å –¥–µ–Ω—å–≥–∏ –Ω–∞ —Å–±–µ—Ä–µ–∂–µ–Ω–∏—è, –∞ –ø–æ—Ç–æ–º —Ç—Ä–∞—Ç–∏—Ç—å.',
    reward: 50
  },
  {
    id: '2',
    question: '–ß—Ç–æ —Ç–∞–∫–æ–µ –±—é–¥–∂–µ—Ç?',
    options: ['–ë–æ–ª—å—à–∞—è —Å—É–º–º–∞ –¥–µ–Ω–µ–≥', '–ü–ª–∞–Ω –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤', '–ö–æ—à–µ–ª–µ–∫', '–ë–∞–Ω–∫–æ–º–∞—Ç'],
    correct: 1,
    explanation: '–í–µ—Ä–Ω–æ! –ë—é–¥–∂–µ—Ç - —ç—Ç–æ –ø–ª–∞–Ω —Ç–æ–≥–æ, —Å–∫–æ–ª—å–∫–æ –¥–µ–Ω–µ–≥ —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å –∏ —Ç—Ä–∞—Ç–∏—à—å.',
    reward: 75
  },
  {
    id: '3',
    question: '–î–ª—è —á–µ–≥–æ –Ω—É–∂–Ω—ã —Å–±–µ—Ä–µ–∂–µ–Ω–∏—è?',
    options: ['–ß—Ç–æ–±—ã —Ö—Ä–∞–Ω–∏—Ç—å –¥–æ–º–∞', '–ù–∞ —Å–ª—É—á–∞–π –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã—Ö —Ç—Ä–∞—Ç', '–ß—Ç–æ–±—ã –ø–æ—Ö–≤–∞—Å—Ç–∞—Ç—å—Å—è', '–ù–µ –Ω—É–∂–Ω—ã –≤–æ–æ–±—â–µ'],
    correct: 1,
    explanation: '–û—Ç–ª–∏—á–Ω–æ! –°–±–µ—Ä–µ–∂–µ–Ω–∏—è –ø–æ–º–æ–≥–∞—é—Ç –≤ —Å–ª–æ–∂–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö –∏ –¥–ª—è –±–æ–ª—å—à–∏—Ö –ø–æ–∫—É–ø–æ–∫.',
    reward: 100
  }
];

interface MiniGameProps {
  onReward: (amount: number) => void;
}

export const MiniGame: React.FC<MiniGameProps> = ({ onReward }) => {
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [selectedAnswer, setSelectedAnswer] = useState<number | null>(null);
  const [showResult, setShowResult] = useState(false);
  const [score, setScore] = useState(0);
  const [gameCompleted, setGameCompleted] = useState(false);

  const question = gameQuestions[currentQuestion];

  const handleAnswerSelect = (answerIndex: number) => {
    setSelectedAnswer(answerIndex);
    setShowResult(true);
    
    if (answerIndex === question.correct) {
      const newScore = score + question.reward;
      setScore(newScore);
      onReward(question.reward);
    }
  };

  const nextQuestion = () => {
    if (currentQuestion < gameQuestions.length - 1) {
      setCurrentQuestion(currentQuestion + 1);
      setSelectedAnswer(null);
      setShowResult(false);
    } else {
      setGameCompleted(true);
    }
  };

  const resetGame = () => {
    setCurrentQuestion(0);
    setSelectedAnswer(null);
    setShowResult(false);
    setScore(0);
    setGameCompleted(false);
  };

  if (gameCompleted) {
    return (
      <Card className="p-6 bg-gradient-to-br from-tertiary/20 to-primary/20 text-center animate-bounce-in">
        <div className="mb-4 text-6xl animate-wiggle">üèÜ</div>
        <h3 className="text-2xl font-comic font-bold text-primary mb-2">
          –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!
        </h3>
        <p className="text-lg font-heading mb-4">
          –¢—ã –∑–∞–≤–µ—Ä—à–∏–ª –∏–≥—Ä—É –∏ –∑–∞—Ä–∞–±–æ—Ç–∞–ª <span className="font-bold text-primary">{score}‚ÇΩ</span>!
        </p>
        <Button 
          onClick={resetGame}
          className="bg-secondary hover:bg-secondary/90 text-secondary-foreground font-comic"
        >
          <Icon name="RotateCcw" size={20} className="mr-2" />
          –ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞
        </Button>
      </Card>
    );
  }

  return (
    <Card className="p-6 bg-gradient-to-br from-quaternary/10 to-secondary/10">
      {/* –ü—Ä–æ–≥—Ä–µ—Å—Å */}
      <div className="mb-6">
        <div className="flex justify-between items-center mb-2">
          <h3 className="text-xl font-comic font-bold text-primary">
            –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞
          </h3>
          <div className="text-sm font-heading bg-tertiary text-tertiary-foreground px-3 py-1 rounded-full">
            {currentQuestion + 1} –∏–∑ {gameQuestions.length}
          </div>
        </div>
        <div className="w-full bg-gray-200 rounded-full h-2">
          <div 
            className="bg-primary h-2 rounded-full transition-all duration-300"
            style={{ width: `${((currentQuestion + 1) / gameQuestions.length) * 100}%` }}
          ></div>
        </div>
      </div>

      {/* –í–æ–ø—Ä–æ—Å */}
      <div className="mb-6">
        <h4 className="text-lg font-heading font-semibold mb-4 text-center">
          {question.question}
        </h4>
        
        <div className="space-y-3">
          {question.options.map((option, index) => (
            <Button
              key={index}
              variant={
                showResult
                  ? index === question.correct
                    ? 'default'
                    : selectedAnswer === index
                    ? 'destructive'
                    : 'outline'
                  : 'outline'
              }
              className={`w-full text-left justify-start p-4 h-auto font-comic text-base transition-all duration-200 ${
                !showResult && 'hover:scale-102 hover:shadow-md'
              }`}
              onClick={() => !showResult && handleAnswerSelect(index)}
              disabled={showResult}
            >
              <span className="mr-3 font-bold">
                {String.fromCharCode(65 + index)}
              </span>
              {option}
              {showResult && index === question.correct && (
                <Icon name="CheckCircle" size={20} className="ml-auto" />
              )}
              {showResult && selectedAnswer === index && index !== question.correct && (
                <Icon name="XCircle" size={20} className="ml-auto" />
              )}
            </Button>
          ))}
        </div>
      </div>

      {/* –†–µ–∑—É–ª—å—Ç–∞—Ç */}
      {showResult && (
        <div className="mb-6 p-4 rounded-lg bg-primary/10 border border-primary/20 animate-bounce-in">
          <div className="flex items-start gap-3">
            <div className="text-2xl">
              {selectedAnswer === question.correct ? 'üéâ' : 'üìö'}
            </div>
            <div>
              <p className="font-heading font-semibold mb-2">
                {selectedAnswer === question.correct ? '–ü—Ä–∞–≤–∏–ª—å–Ω–æ!' : '–ù–µ —Å–æ–≤—Å–µ–º...'}
              </p>
              <p className="text-sm text-muted-foreground mb-2">
                {question.explanation}
              </p>
              {selectedAnswer === question.correct && (
                <p className="text-sm font-bold text-primary">
                  +{question.reward}‚ÇΩ –∫ –±–∞–ª–∞–Ω—Å—É!
                </p>
              )}
            </div>
          </div>
        </div>
      )}

      {/* –ù–∞–≤–∏–≥–∞—Ü–∏—è */}
      {showResult && (
        <div className="flex justify-center">
          <Button 
            onClick={nextQuestion}
            className="bg-primary hover:bg-primary/90 text-white font-comic px-8"
          >
            {currentQuestion < gameQuestions.length - 1 ? (
              <>
                –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
                <Icon name="ArrowRight" size={20} className="ml-2" />
              </>
            ) : (
              <>
                –ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É
                <Icon name="Trophy" size={20} className="ml-2" />
              </>
            )}
          </Button>
        </div>
      )}
    </Card>
  );
};

export default MiniGame;